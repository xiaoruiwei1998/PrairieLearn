<!DOCTYPE html>
<html lang="en">
  <head>
    <%- include('../partials/head', {pageTitle: 'cheat_detection'}); %>
    <script src="<%= node_modules_asset_path('lodash/lodash.min.js') %>"></script>
    <script src="<%= node_modules_asset_path('d3/dist/d3.min.js') %>"></script>
    <script src="<%= asset_path('localscripts/histogram.js') %>"></script>
    <script src="<%= asset_path('localscripts/scatter.js') %>"></script>
    <script src="<%= asset_path('localscripts/parallel_histograms.js') %>"></script>
    <!-- Load Chart.js Library-->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.8.0/dist/chart.min.js"></script>
    <!-- Load Papa Parse Library-->
    <script src="https://cdn.jsdelivr.net/npm/papaparse@5.3.2/papaparse.min.js"></script>
  </head>
  <body>
    <script>
      $(function () {
          $('[data-toggle="popover"]').popover({sanitize: false})
      });
    </script>
    <%- include('../partials/navbar'); %>
    <div id="content" class="container-fluid">
      <%- include('../partials/assessmentSyncErrorsAndWarnings'); %>
      <div class="card mb-4">
        <div class="card-header bg-primary text-white">
          Similarity Check for <%= assessment_set.name %>
        </div>
        <% if (assessment_stat.number > 0) { %>
        <div class="card-body">
          <!-- Cheat Detection Overall Sim Chart-->
          <div class = "cd_button">
            <input type = "file" id = "uploadcsv">
            <button type="button" class="btn btn-sm btn-primary" id="uploadconfirm"> Upload CSV</button>
            <hr>
            <button type="button" class="btn btn-sm btn-primary" 
              onclick="updateChart('overall_prob')"> Overall Similarity </button>
            <button type="button" class="btn btn-sm btn-primary" 
              onclick="updateChart('rule1_prob')"> Time Similarity </button>
            <button type="button" class="btn btn-sm btn-primary" 
              onclick="updateChart('rule2_prob')"> Answer Similarity </button>
            <button type="button" class="btn btn-sm btn-primary" 
              onclick="updateChart('rule3_prob')"> Order Similarity </button>
          </div>
          <div class="cd_chart" height= "400" width= "400">
            <canvas id="chart"></canvas>
          </div>
          <script>
            let overall_data = {
              "0-0.1": 0, "0.1-0.2": 0, "0.2-0.3": 0, "0.3-0.4": 0, "0.4-0.5": 0, 
              "0.5-0.6": 0, "0.6-0.7": 0, "0.7-0.8": 0, "0.8-0.9": 0, "0.9-1": 0 };
            let time_data = {...overall_data};
            let answer_data = {...overall_data};
            let order_data = {...overall_data};
             let group_count = {
            "0-0.1":0, 
            "0.1-0.2":0, 
            "0.2-0.3":0, 
            "0.3-0.4":0, 
            "0.4-0.5":0, 
            "0.5-0.6":0, 
            "0.6-0.7":0, 
            "0.7-0.8":0,
            "0.8-0.9":0, 
            "0.9-1":0
            };
           
            //const csv = await fetch('pages/instructorAssessmentCheatDetection/cheat-detection-py/result.csv');
            //const data = await csv.text();
            function readWriteData(results, ruleData) {
              let dict = {};
              let score = null;
              if (ruleData === 'overall_prob') { dict = overall_data; }
              else if (ruleData === 'rule1_prob') { dict = time_data; }
              else if (ruleData === 'rule2_prob') { dict = answer_data; }
              else if (ruleData === 'rule3_prob') { dict = order_data; }
              for (i = 0; i < results.data.length; i++) {
                if (ruleData === 'overall_prob') { score = results.data[i].overall_prob; }
                else if (ruleData === 'rule1_prob') { score = results.data[i].rule1_prob; }
                else if (ruleData === 'rule2_prob') { score = results.data[i].rule2_prob; }
                else if (ruleData === 'rule3_prob') { score = results.data[i].rule3_prob; }
                if (score <= 0.1)
                  dict["0-0.1"] += 1;
                else if (0.1 < score <= 0.2)
                  dict["0.1-0.2"] += 1;
                else if (0.2 < score <= 0.3)
                  dict["0.2-0.3"] += 1;
                else if (0.3 < score <= 0.4)
                  dict["0.3-0.4"] += 1;
                else if (0.4 < score <= 0.5)
                  dict["0.4-0.5"] += 1;
                else if (0.5 < score <= 0.6)
                  dict["0.5-0.6"] += 1;
                else if (0.6 < score <= 0.7)
                  dict["0.6-0.7"] += 1;
                else if (0.7 < score <= 0.8)
                  dict["0.7-0.8"] += 1;
                else if (0.8 < score <= 0.9)
                  dict["0.8-0.9"] += 1;
                else
                  dict["0.9-1"] += 1;
                
              }
              if (ruleData === 'overall_prob') { overall_data = dict; }
              else if (ruleData === 'rule1_prob') { time_data = dict; }
              else if (ruleData === 'rule2_prob') { answer_data = dict; }
              else if (ruleData === 'rule3_prob') { order_data = dict; }
              
            }
            const uploadcsv = document.getElementById('uploadconfirm')
              .addEventListener('click', () => {
                //Parsing
                Papa.parse(document.getElementById('uploadcsv').files[0], {
                  download: true,
                  header: true,
                  skipEmptyLines: true,
                  
                  complete : function(results) {
                    readWriteData(results, 'overall_prob');
                    readWriteData(results, 'rule1_prob', time_data);
                    readWriteData(results, 'rule2_prob', answer_data);
                    readWriteData(results, 'rule3_prob', order_data);
                    }
                });
              });
              
            //Setup Block
            const data = {
              labels: Object.keys(group_count),
              datasets: [{
                  label: "Overall Similarity",
                  data: Object.values(group_count),
                  // xAxisID: "x",
                  //Blue Bars
                  backgroundColor: 'rgba(54, 162, 235, 0.2)',
                  borderColor: 'rgba(54, 162, 235, 0.6)',
                  borderWidth: 1,
                  hoverBorderWidth: 2,
                  hoverBorderColor: 'rgba(54, 162, 235, 1)'
              }]
            };
            //Config Block
            const config = {
              type: 'bar',
              data: data,
              options: {
                scales: {
                  y : {
                    // type: 'linear',
                    text: 'Frequency',
                    grace: '10%'
                  },
                  
                }
              }
            };
            
            //Init Render Block
            const myChart = new Chart(
              document.getElementById('chart'),
              config
            );
            
            function updateChart(rule) {
              myChart.data.datasets[0].label = "Number of pairs within the bin";
              //set display data to data pertaining to rule
              if (rule === 'overall_prob') {
                for(const key in overall_data) {
                group_count[key] = overall_data[key]
                }
              }
              if (rule === 'rule1_prob') {
                for(const key in time_data) {
                group_count[key] = time_data[key]
                }
              }
              if (rule === 'rule2_prob') {
                for(const key in answer_data) {
                group_count[key] = answer_data[key]
                }
              }
              if (rule === 'rule3_prob') {
                for(const key in order_data) {
                group_count[key] = order_data[key]
                }
              }
              console.log(Object.values(group_count));
              myChart.data.datasets[0].data = Object.values(group_count);
            
              myChart.update();
            };
          </script>
        </div>
        <% } %>
      </div>
    </div>
  </body>
</html>